import {Component, OnInit} from '@angular/core';
import {Course} from "../model/course";
import {interval, Observable, of, timer, noop} from 'rxjs';
import {catchError, delayWhen, map, retryWhen, shareReplay, tap} from 'rxjs/operators';
import { createHttpObservable } from '../common/util';


@Component({
    selector: 'home',
    templateUrl: './home.component.html',
    styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
    
    beginnerCourses$: Observable<Course[]>;
    advancedCourses$: Observable<Course[]>;

    constructor() {

    }

    ngOnInit() {

      const http$ : Observable<Course[]> = createHttpObservable('/api/courses');
      //sharereplay will fix the multiple calls to backend. It will pass the same response
      //to different subscriptions
      //tap is used to break the observable means if you want to update something which is not
      //in the context of observable
      const courses$ : Observable<Course[]>  = http$
                       .pipe(
                         tap(()=> console.log('Http request executed'))
                         map(res => Object.values(res["payload"])),
                         shareReplay()
                       );
     //We can derive other courses from courses$ itself.

     this.beginnerCourses$ = courses$
                             .pipe(
                               map(courses => courses.filter(course => course.category === 'BEGINNER'))
                             );
    this.advancedCourses$ = courses$
                             .pipe(
                               map(courses => courses.filter(course => course.category === 'ADVANCED'))
                             );

    }

}
